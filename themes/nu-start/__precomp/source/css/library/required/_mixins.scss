@mixin flush_inner_content_vertical {
	// reduces overall vertical space
	> *:first-child {
		margin-top: 0;
	}
	> *:last-child {
		margin-bottom: 0;
	}
}

@mixin center_absolute(){
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

@mixin displayedInvisible() {
	visibility: hidden;
	position: absolute;
	left: -9999px;
	height: 0;
	overflow: hidden;
	min-height: 0px;
}

@mixin reset_list_styling {
	padding-left: 1.5rem;

	li {
		padding-bottom: 0.5rem;

		&:last-child {
			padding-bottom: 0;
		}

		ul,
		ol {
			padding-top: 0.5rem;
		}
	}

	&.wp-block-gallery {
		padding-left: 0;

		li {
			padding-bottom: 0;
		}
	}
}

/**
 * Clearfix
 *
 */
@mixin clearfix() {
	&:after {
		content: "";
		display: table;
		clear: both;
	}
}

@mixin bgImage {
	background: rgba($black, 0.5);
	background-position: center center;
	background-repeat: no-repeat;
	background-size: cover;
}

@mixin boxshadow($depth: 1) {
	@if $depth==0 {
		box-shadow: 0 1px 3px rgba(0, 0, 0, 0), 0 1px 2px rgba(0, 0, 0, 0);
	}

	@if $depth==1 {
		box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
	} @else if $depth==2 {
		box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
	} @else if $depth==3 {
		box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19),
			0 6px 6px rgba(0, 0, 0, 0.23);
	} @else if $depth==4 {
		box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25),
			0 10px 10px rgba(0, 0, 0, 0.22);
	} @else if $depth==5 {
		box-shadow: 0 19px 38px rgba(0, 0, 0, 0.3),
			0 15px 12px rgba(0, 0, 0, 0.22);
	}
}

@mixin accentUnderline($el: before, $h: 2px, $d: right) {
	position: relative;

	padding-bottom: #{$h}; // ? enable to add padding for the underline

	&:#{$el} {
		content: "";
		display: block;
		width: 0;
		height: 0;
		position: absolute;
		border-bottom: $h solid currentColor;
		bottom: -#{$h};

		@extend %transition;

		@if $d==right {
			left: 0;
			right: auto;
		} @else if $d==left {
			right: 0;
			left: auto;
		}
	}
}

// ? padding-top is used to manually proportion images that fill a specific size
// ? <img> tags do not ever use this
// ? div.bgimage--container uses this, with ANY inner content absolutely positioned.
// ? for anything more complex than the bgimage case; essentially use a .content in its place
@mixin aspect-ratio($w, $h) {
	position: relative;

	&:before {
		display: block;
		content: "";
		width: 100%;
		// padding-top: ($h / $w) * 100%;
		padding-top: math.div($h, $w);
	}
}

@mixin nu_micon($c: "", $el: before) {
	position: relative;

	&:#{$el} {
		content: $c;
		// code block below pulled from the .material-icons class (recommended / required to properly display icons on all browsers)
		font-family: "Material Icons";
		font-weight: normal;
		font-style: normal;
		font-size: 24px;
		line-height: 1;
		line-height: inherit;
		letter-spacing: normal;
		text-transform: none;
		display: inline-block;
		vertical-align: middle;
		white-space: nowrap;
		word-wrap: normal;
		direction: ltr;
		font-feature-settings: "liga";
		-moz-font-feature-settings: "liga";
		-moz-osx-font-smoothing: grayscale;
	}
}

@mixin nuGrid($w, $c, $gX, $gY: $gX) {
	> ul {
		display: flex;
		flex-flow: row wrap;
		> li {
			$basis: calc((#{$w} - ((#{$c} - 1) * #{$gX})) / #{$c});
			flex: 0 1 $basis;
			margin: 0 $gX $gY 0; // set item margins

			&:nth-child(n + 1) {
				margin: 0 $gX $gY 0; // reset next item margins
			}

			&:nth-child(#{$c}n) {
				margin: 0 0 $gY 0; // clip margin-right for nth-column
			}
		}
	}
}
